import YEnc from '../../src/Encoders/YEnc';

const encoder = new YEnc();

const shortString = 'Hello, world!';
const shortStringProof = String.fromCharCode(...[
    0x3D,0x79,0x62,0x65,0x67,0x69,0x6E,0x20,
    0x6C,0x69,0x6E,0x65,0x3D,0x31,0x32,0x38,
    0x20,0x73,0x69,0x7A,0x65,0x3D,0x31,0x33,
    0x20,0x6E,0x61,0x6D,0x65,0x3D,0x62,0x69,
    0x6E,0x61,0x72,0x79,0x2E,0x64,0x61,0x74,
    0x0D,0x0A,0x72,0x8F,0x96,0x96,0x99,0x56,
    0x4A,0xA1,0x99,0x9C,0x96,0x8E,0x4B,0x0D,
    0x0A,0x3D,0x79,0x65,0x6E,0x64,0x20,0x73,
    0x69,0x7A,0x65,0x3D,0x31,0x33,0x0D,0x0A
]);

test('Should encode short string using yEnc', () => {
    expect(encoder.encode(shortString)).toEqual(shortStringProof);
});

test('Should decode yEncoded short string', () => {
    const encodedString = encoder.encode(shortString);
    expect(encoder.decode(encodedString)).toEqual(shortString);
});

const longString = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam vel suscipit urna, ac auctor purus. Ut a nisl aliquam, pulvinar tortor quis, vehicula elit. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Phasellus sollicitudin tempor vestibulum. Pellentesque rutrum accumsan euismod. Suspendisse eros nunc, venenatis eu mi ut, convallis malesuada metus.';
const longStringProof = String.fromCharCode(...[
    0x3D,0x79,0x62,0x65,0x67,0x69,0x6E,0x20,0x6C,0x69,0x6E,0x65,0x3D,0x31,0x32,0x38,
    0x20,0x73,0x69,0x7A,0x65,0x3D,0x34,0x38,0x31,0x20,0x6E,0x61,0x6D,0x65,0x3D,0x62,
    0x69,0x6E,0x61,0x72,0x79,0x2E,0x64,0x61,0x74,0x0D,0x0A,0x76,0x99,0x9C,0x8F,0x97,
    0x4A,0x93,0x9A,0x9D,0x9F,0x97,0x4A,0x8E,0x99,0x96,0x99,0x9C,0x4A,0x9D,0x93,0x9E,
    0x4A,0x8B,0x97,0x8F,0x9E,0x56,0x4A,0x8D,0x99,0x98,0x9D,0x8F,0x8D,0x9E,0x8F,0x9E,
    0x9F,0x9C,0x4A,0x8B,0x8E,0x93,0x9A,0x93,0x9D,0x8D,0x93,0x98,0x91,0x4A,0x8F,0x96,
    0x93,0x9E,0x58,0x4A,0x6B,0x96,0x93,0x9B,0x9F,0x8B,0x97,0x4A,0xA0,0x8F,0x96,0x4A,
    0x9D,0x9F,0x9D,0x8D,0x93,0x9A,0x93,0x9E,0x4A,0x9F,0x9C,0x98,0x8B,0x56,0x4A,0x8B,
    0x8D,0x4A,0x8B,0x9F,0x8D,0x9E,0x99,0x9C,0x4A,0x9A,0x9F,0x9C,0x9F,0x9D,0x58,0x4A,
    0x7F,0x9E,0x4A,0x8B,0x4A,0x98,0x93,0x9D,0x96,0x4A,0x8B,0x96,0x93,0x9B,0x9F,0x8B,
    0x97,0x56,0x4A,0x9A,0x9F,0x96,0xA0,0x93,0x98,0x8B,0x9C,0x0D,0x0A,0x4A,0x9E,0x99,
    0x9C,0x9E,0x99,0x9C,0x4A,0x9B,0x9F,0x93,0x9D,0x56,0x4A,0xA0,0x8F,0x92,0x93,0x8D,
    0x9F,0x96,0x8B,0x4A,0x8F,0x96,0x93,0x9E,0x58,0x4A,0x80,0x8F,0x9D,0x9E,0x93,0x8C,
    0x9F,0x96,0x9F,0x97,0x4A,0x8B,0x98,0x9E,0x8F,0x4A,0x93,0x9A,0x9D,0x9F,0x97,0x4A,
    0x9A,0x9C,0x93,0x97,0x93,0x9D,0x4A,0x93,0x98,0x4A,0x90,0x8B,0x9F,0x8D,0x93,0x8C,
    0x9F,0x9D,0x4A,0x99,0x9C,0x8D,0x93,0x4A,0x96,0x9F,0x8D,0x9E,0x9F,0x9D,0x4A,0x8F,
    0x9E,0x4A,0x9F,0x96,0x9E,0x9C,0x93,0x8D,0x8F,0x9D,0x4A,0x9A,0x99,0x9D,0x9F,0x8F,
    0x9C,0x8F,0x4A,0x8D,0x9F,0x8C,0x93,0x96,0x93,0x8B,0x4A,0x6D,0x9F,0x9C,0x8B,0x8F,
    0x65,0x4A,0x79,0x9C,0x8D,0x93,0x4A,0xA0,0x8B,0x9C,0x93,0x9F,0x9D,0x0D,0x0A,0x4A,
    0x98,0x8B,0x9E,0x99,0x9B,0x9F,0x8F,0x4A,0x9A,0x8F,0x98,0x8B,0x9E,0x93,0x8C,0x9F,
    0x9D,0x4A,0x8F,0x9E,0x4A,0x97,0x8B,0x91,0x98,0x93,0x9D,0x4A,0x8E,0x93,0x9D,0x4A,
    0x9A,0x8B,0x9C,0x9E,0x9F,0x9C,0x93,0x8F,0x98,0x9E,0x4A,0x97,0x99,0x98,0x9E,0x8F,
    0x9D,0x56,0x4A,0x98,0x8B,0x9D,0x8D,0x8F,0x9E,0x9F,0x9C,0x4A,0x9C,0x93,0x8E,0x93,
    0x8D,0x9F,0x96,0x9F,0x9D,0x4A,0x97,0x9F,0x9D,0x58,0x4A,0x7A,0x92,0x8B,0x9D,0x8F,
    0x96,0x96,0x9F,0x9D,0x4A,0x9D,0x99,0x96,0x96,0x93,0x8D,0x93,0x9E,0x9F,0x8E,0x93,
    0x98,0x4A,0x9E,0x8F,0x97,0x9A,0x99,0x9C,0x4A,0xA0,0x8F,0x9D,0x9E,0x93,0x8C,0x9F,
    0x96,0x9F,0x97,0x58,0x4A,0x7A,0x8F,0x96,0x96,0x8F,0x98,0x9E,0x8F,0x9D,0x9B,0x0D,
    0x0A,0x9F,0x8F,0x4A,0x9C,0x9F,0x9E,0x9C,0x9F,0x97,0x4A,0x8B,0x8D,0x8D,0x9F,0x97,
    0x9D,0x8B,0x98,0x4A,0x8F,0x9F,0x93,0x9D,0x97,0x99,0x8E,0x58,0x4A,0x7D,0x9F,0x9D,
    0x9A,0x8F,0x98,0x8E,0x93,0x9D,0x9D,0x8F,0x4A,0x8F,0x9C,0x99,0x9D,0x4A,0x98,0x9F,
    0x98,0x8D,0x56,0x4A,0xA0,0x8F,0x98,0x8F,0x98,0x8B,0x9E,0x93,0x9D,0x4A,0x8F,0x9F,
    0x4A,0x97,0x93,0x4A,0x9F,0x9E,0x56,0x4A,0x8D,0x99,0x98,0xA0,0x8B,0x96,0x96,0x93,
    0x9D,0x4A,0x97,0x8B,0x96,0x8F,0x9D,0x9F,0x8B,0x8E,0x8B,0x4A,0x97,0x8F,0x9E,0x9F,
    0x9D,0x58,0x0D,0x0A,0x3D,0x79,0x65,0x6E,0x64,0x20,0x73,0x69,0x7A,0x65,0x3D,0x34,
    0x38,0x31,0x0D,0x0A
]);

test('Should encode long string using yEnc', () => {
    expect(encoder.encode(longString)).toEqual(longStringProof);
});

test('Should decode yEncoded long string', () => {
    const encodedString = encoder.encode(longString);
    expect(encoder.decode(encodedString)).toEqual(longString);
});